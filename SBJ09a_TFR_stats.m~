function SBJ09a_TFR_stats(SBJ,conditions,pipeline_id,an_id)
% Calculates time frequency representation, computes cluster-based statistics, and plots the results
% INPUTS:
%   SBJ [str] - dataset to be processed
%   conditions [str] - experimental conditions to be compared
%   pipeline_id [str] - which processed data pipeline to get the data
%   an_id [str] - which analysis variables to use

% clear all; %close all;
% Set up paths
addpath('/home/knight/hoycw/PRJ_Stroop/scripts/');
addpath('/home/knight/hoycw/PRJ_Stroop/scripts/utils/');
addpath('/home/knight/hoycw/Apps/fieldtrip/');
ft_defaults

%% Data Preparation
% Load Data
eval(['run /home/knight/hoycw/PRJ_Stroop/scripts/SBJ_vars/' SBJ '_vars.m']);
eval(['run /home/knight/hoycw/PRJ_Stroop/scripts/an_vars/' an_id '_vars.m']);

load(strcat(SBJ_vars.dirs.preproc,SBJ,'_preproc_',pipeline_id,'.mat'));
load(strcat(SBJ_vars.dirs.events,SBJ,'_trial_info_final.mat'));

% Select Conditions of Interest
[cond_lab, cond_colors, cond_style] = fn_condition_label_styles(conditions);
cond_idx = false([length(cond_lab) length(trial_info.trial_n)]);
for cond_ix = 1:length(cond_lab)
    % Get binary condition index
    cond_idx(cond_ix,:) = logical(fn_condition_index(cond_lab{cond_ix},...
        trial_info.condition_n));
end

%% Select Channel(s)
cfgs = [];
cfgs.channel = SBJ_vars.ch_lab.ROI;
roi = ft_selectdata(cfgs,data);

%% Cut into Trials
if strcmp(event_type,'stim')
    events = trial_info.word_onset;
elseif strcmp(event_type,'resp')
    events = trial_info.resp_onset;
else
    error(stract('ERROR: unknown event_type ',event_type));
end
roi_trl = fn_ft_cut_trials_equal_len(roi,events,trial_info.condition_n',trial_lim_s*roi.fsample);

% Extract Baseline if it is timelocked to a different event
if ~strcmp(event_type,bsln_evnt)
    if strcmp(bsln_evnt,'stim')
        bsln_evnts = trial_info.word_onset;
    elseif strcmp(bsln_evnt,'resp')
        bsln_evnts = trial_info.resp_onset;
    else
        error(strcat('ERROR: unknown bsln_evnt ',bsln_evnt));
    end
    % Account for the loss of 1/2 TFR window
    bsln_lim = [bsln_lim(1)-cfg_tfr.t_ftimwin(1)/2 bsln_lim(2)+cfg_tfr.t_ftimwin(1)/2];
    bsln_trl = fn_ft_cut_trials_equal_len(roi,bsln_evnts,trial_info.condition_n',bsln_lim*roi.fsample);
end

%% Compute TFRs
% all cfg_tfr options are specified in the an_vars
tfr      = {};
bsln_tfr = {};
n_trials = zeros([1 numel(cond_lab)]);
for cond_ix = 1:numel(cond_lab)
    fprintf('===================================================\n');
    fprintf('------------- TFR Calculations for %s ----------\n',cond_lab{cond_ix});
    fprintf('===================================================\n');
    cfg_tfr.trials = find(cond_idx(cond_ix,:)==1);
    tfr{cond_ix}   = ft_freqanalysis(cfg_tfr, roi_trl);
    if ~strcmp(event_type,bsln_evnt)
        bsln_tfr{cond_ix}   = ft_freqanalysis(cfg_tfr, bsln_trl);
    end
    
    % Grab n_trials for design matrix
    n_trials(cond_ix) = size(tfr{cond_ix}.trialinfo,1);
end

%% Baseline Correction
fprintf('===================================================\n');
fprintf('------------- Baseline Correction for %s ----------\n',cond_lab{cond_ix});
fprintf('===================================================\n');
for cond_ix = 1:numel(cond_lab)
    switch bsln_type
        case {'zscore', 'demean', 'my_relchange'}
            tfr{cond_ix} = fn_bsln_ft_tfr(tfr{cond_ix},bsln_tfr{cond_ix},bsln_type);
        case 'relchange'
            cfgbsln = [];
            cfgbsln.baseline     = bsln_lim;
            cfgbsln.baselinetype = bsln_type;
            cfgbsln.parameter    = 'powspctrm';
            tfr{cond_ix} = ft_freqbaseline(cfgbsln,tfr{cond_ix});
        otherwise
            error(['No baseline implemented for bsln_type: ' bsln_type]);
    end
end

%% Run Statistics
fprintf('===================================================\n');
fprintf('--------------------- Statistics ------------------\n');
fprintf('===================================================\n');
% Create design matrix
design = zeros(2,sum(n_trials));
for an_ix = 1:numel(cond_lab)
    if an_ix==1
        design(1,1:n_trials(an_ix)) = an_ix;                                % Conditions (Independent Variable)
        design(2,1:n_trials(an_ix)) = 1:n_trials(an_ix);                    % Trial Numbers
    else
        design(1,sum(n_trials(1:an_ix-1))+1:sum(n_trials(1:an_ix)))= an_ix; % Conditions (Independent Variable)
        design(2,sum(n_trials(1:an_ix-1))+1:sum(n_trials(1:an_ix)))= 1:n_trials(an_ix);
    end
end

% Calculate statistics
cfg_stat.design           = design;
[stat] = ft_freqstatistics(cfg_stat, tfr{:});

%% Save Results
data_out_filename = strcat(SBJ_vars.dirs.proc,SBJ,'_',conditions,'_ROI_',an_id,'.mat');
fprintf('===================================================\n');
fprintf('--- Saving %s ------------------\n',data_out_filename);
fprintf('===================================================\n');
save(data_out_filename, '-v7.3','stat','tfr');

end